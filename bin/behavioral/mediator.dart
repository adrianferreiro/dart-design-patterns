// Patron Mediator en Dart
// Este ejemplo simula una sala de chat donde los usuarios se comunican a travÃ©s de un mediador central (ChatRoom).

class ChatRoom {
  final String title;
  final List<User> _users = [];

  ChatRoom(this.title);

  void addUser(User user) {
    _users.add(user);
  }

  void sendMessage(User sender, String message) {
    final usersToReceive = _users.where((u) => u != sender);
    for (final user in usersToReceive) {
      user.receiveMessage(sender, message);
    }
  }
}

class User {
  final String username;
  final ChatRoom chatRoom;

  User(this.username, this.chatRoom) {
    chatRoom.addUser(this);
  }

  void sendMessage(String message) {
    print('$username envÃ­a: $message');
    chatRoom.sendMessage(this, message);
  }

  void receiveMessage(User sender, String message) {
    print('$username recibe de ${sender.username}: $message');
  }
}

void main() {
  final chatRoom = ChatRoom('Grupo de trabajo');

  final user1 = User('Adrian', chatRoom);
  final user2 = User('Enrique', chatRoom);
  final user3 = User('Omar', chatRoom);

  user1.sendMessage('Hola a todos!');
  print('\n');
  user2.sendMessage('Â¡Hola Adrian! Â¿CÃ³mo estÃ¡s?');
  print('\n');
  user3.sendMessage('Â¡Hola Adrian y Enrique! Â¿CÃ³mo estÃ¡n?');
}


/*

âœ… Â¿Para quÃ© sirve este patrÃ³n?
Evita que los objetos (usuarios) se comuniquen directamente entre sÃ­, reduciendo el acoplamiento y facilitando el mantenimiento y extensiÃ³n del sistema.
 En este caso, si cambia la lÃ³gica de envÃ­o de mensajes, solo se modifica en ChatRoom.


ğŸ§  Â¿QuÃ© hace este cÃ³digo?
Simula un chat grupal donde varios usuarios pueden enviarse mensajes, pero sin comunicarse entre ellos directamente.
En cambio, todos los mensajes pasan por un mediador central, que es la clase ChatRoom.



ğŸ§© Â¿CÃ³mo funciona?
1. ChatRoom (el mediador):
    Tiene una lista de usuarios (_users).
    Cada vez que un usuario envÃ­a un mensaje, el ChatRoom reenvÃ­a ese mensaje a todos los usuarios excepto al remitente.

2. User (los colegas):
    Representa un usuario del chat.
    Cada usuario estÃ¡ vinculado a un ChatRoom cuando se crea.
    Tiene dos mÃ©todos:
      sendMessage: para enviar mensajes.
      receiveMessage: para recibir mensajes.

3. main() (el cliente):
    Crea un ChatRoom y tres usuarios (Adrian, Enrique, Omar).
    Simula que cada uno envÃ­a un mensaje al grupo.
 */